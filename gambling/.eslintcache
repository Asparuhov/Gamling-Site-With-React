[{"C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\index.js":"1","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\App.js":"2","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\reportWebVitals.js":"3","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Containers\\MainPage\\Main.js":"4","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Components\\Roulette\\Roulette.js":"5","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Components\\Chat\\Chat.js":"6","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Wrap.js":"7","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Components\\SideDrawer\\SideDrawer.js":"8","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Components\\BackDrop\\Backdrop.js":"9","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Containers\\Shop\\Shop.js":"10","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Containers\\Shop\\Item.js":"11","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\store\\reducer.js":"12"},{"size":684,"mtime":1608553720375,"results":"13","hashOfConfig":"14"},{"size":1654,"mtime":1608394230253,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":389,"mtime":1608397665783,"results":"17","hashOfConfig":"14"},{"size":5686,"mtime":1608554578164,"results":"18","hashOfConfig":"14"},{"size":532,"mtime":1608365372068,"results":"19","hashOfConfig":"14"},{"size":92,"mtime":1608360655580,"results":"20","hashOfConfig":"14"},{"size":409,"mtime":1608392864657,"results":"21","hashOfConfig":"14"},{"size":196,"mtime":1608384163119,"results":"22","hashOfConfig":"14"},{"size":850,"mtime":1608396023194,"results":"23","hashOfConfig":"14"},{"size":391,"mtime":1608396015516,"results":"24","hashOfConfig":"14"},{"size":458,"mtime":1608554615785,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"qljf6s",{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\index.js",[],["57","58"],"C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\App.js",["59","60"],"import {Route, Link, BrowserRouter} from 'react-router-dom';\nimport React,{useState} from 'react';\nimport Main from './Containers/MainPage/Main';\nimport classes from './App.module.css'\nimport SideDrawer from './Components/SideDrawer/SideDrawer';\nimport Backdrop from './Components/BackDrop/Backdrop';\nimport Shop from './Containers/Shop/Shop';\nfunction App(props) {\n  const [Show, setShow] = useState(false);\n  let [balance, setBalance] = useState(3500);\n  return (\n    <BrowserRouter>\n      <div style={{height: '100%'}}>\n        {Show ? \n          <div>\n            <SideDrawer />\n            <Backdrop clicked={()=>setShow(prev => !prev)}/>\n            </div>\n        : null}\n    <div className={classes.App}>\n      <header>\n          <nav>\n            <button className={classes.ThreeLines} onClick={()=>setShow(prev => !prev)}>\n              <div className={classes.Line}></div>\n              <div className={classes.Line}></div>\n              <div className={classes.Line}></div>\n            </button>\n            <div className={classes.Spacer}/>\n            <ul>\n                <li><Link className={classes.Link} to='/'>Roulette</Link></li>\n            <li><Link className={classes.Link} to='/shop'>Shop</Link></li>\n                <li><Link className={classes.Link} to='/inventory'>Inventory</Link></li>\n                <li>{props.balance}</li>\n          </ul>\n        </nav>\n      </header>\n      <Route path='/' exact component={Main} />\n      <Route path='/shop' exact component={Shop} />\n      <Route path='/inventory' exact render={() => <h1>inventory</h1>}/>\n        </div>\n        </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\reportWebVitals.js",[],"C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Containers\\MainPage\\Main.js",["61"],"import React,{useEffect} from 'react';\r\nimport Roulette from '../../Components/Roulette/Roulette';\r\nimport Chat from '../../Components/Chat/Chat';\r\nimport classes from './Main.module.css';\r\nconst Main = props => {\r\n    return (\r\n        <div className={classes.Main}>\r\n            <div><Chat /></div>\r\n            <div> <Roulette /> </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Components\\Roulette\\Roulette.js",["62"],"import classes from './Roulette.module.css';\r\nimport React, { useState } from 'react'\r\nimport { Wheel } from 'react-custom-roulette'\r\nimport {connect} from 'react-redux';\r\n\r\nconst Roulette = props => {\r\nconst data = [\r\n    {option: '0', style: {backgroundColor: 'green', textColor: 'white'}},\r\n    {option: '1', style: {backgroundColor: 'black', textColor: 'white'}},\r\n    {option: '2', style: {backgroundColor: 'red', textColor: 'white'}},\r\n    {option: '3', style: {backgroundColor: 'black', textColor: 'white'}},\r\n    {option: '4', style: {backgroundColor: 'red', textColor: 'white'}},\r\n    {option: '5', style: {backgroundColor: 'black', textColor: 'white'}},\r\n    {option: '6', style: {backgroundColor: 'red', textColor: 'white'}}, \r\n    {option: '7', style: {backgroundColor: 'black', textColor: 'white'}},\r\n    {option: '8', style: {backgroundColor: 'red', textColor: 'white'}},\r\n    {option: '9', style: {backgroundColor: 'black', textColor: 'white'}},\r\n    {option: '10', style: {backgroundColor: 'red', textColor: 'white'}},\r\n    {option: '11', style: {backgroundColor: 'black', textColor: 'white'}},\r\n    {option: '12', style: {backgroundColor: 'red', textColor: 'white'}},\r\n    {option: '13', style: {backgroundColor: 'black', textColor: 'white'}},\r\n    {option: '14', style: { backgroundColor: 'red', textColor: 'white'}}\r\n]\r\n  const [mustSpin, setMustSpin] = useState(false);\r\n  const [prizeNumber, setPrizeNumber] = useState(null);\r\n  const [finalResult, setFinalResult] = useState({\r\n        number: null,\r\n        color: null\r\n  })\r\n  const [placeBet, setPlaceBet] = useState({\r\n        totalBet: null,\r\n        betSizeRed: null,\r\n        betSizeBlack: null,\r\n        betSizeGreen: null,\r\n        betPlaced: false\r\n  })\r\n  const [payBets, setPayBets] = useState(false);\r\n  const resetBets = {\r\n        totalBet: null,\r\n        betSizeRed: null,\r\n        betSizeBlack: null,\r\n        betSizeGreen: null,\r\n        betPlaced: false\r\n    }\r\n\r\n    const handleSpinClick = () => {\r\n        const newPrizeNumber = Math.floor(Math.random() * data.length);\r\n        setPrizeNumber(newPrizeNumber)\r\n        setMustSpin(true);\r\n        setFinalResult({...finalResult, number: data[newPrizeNumber].option, color: data[newPrizeNumber].style.backgroundColor});\r\n        setPlaceBet({...placeBet, betPlaced: true});\r\n    }\r\n    const updateBet = e => {\r\n        const newValue = Number(e.target.value);\r\n        setPlaceBet({...placeBet, totalBet: newValue});\r\n    }\r\n    const colorBet = (color) => {\r\n        if (balance > 0) {\r\n            if (color === 'red') {\r\n                let bet = placeBet.totalBet;\r\n                setPlaceBet({...placeBet, betSizeRed: placeBet.betSizeRed + bet});\r\n                props.setBalance(balance - bet);\r\n            }\r\n            if (color === 'black') {\r\n                let bet = placeBet.totalBet;\r\n                setPlaceBet({...placeBet, betSizeBlack: placeBet.betSizeBlack + bet});\r\n                props.setBalance(balance - bet);\r\n            }\r\n            if (color === 'green') {\r\n                let bet = placeBet.totalBet;\r\n                setPlaceBet({...placeBet, betSizeGreen: placeBet.betSizeGreen + bet});\r\n                props.setBalance(balance - bet);\r\n            }\r\n        }\r\n        else{alert('balance not enough')}\r\n    }\r\n  return (\r\n      <div className={classes.Roulette}>\r\n          <Wheel\r\n              mustStartSpinning={mustSpin}\r\n              prizeNumber={prizeNumber}\r\n              data={data}\r\n              onStopSpinning={() => {\r\n                  setMustSpin(false)\r\n                  setPayBets(!payBets);\r\n                  if (props.balance <= 0) {\r\n                      props.setBalance(0);\r\n                  }\r\n                  if (placeBet.betPlaced) {\r\n                      if (placeBet.betSizeBlack && finalResult.color === 'black') {\r\n                          props.addBalance(placeBet.betSizeBlack * 2)\r\n                      }\r\n                      if (placeBet.betSizeRed && finalResult.color === 'red') {\r\n                          props.addBalance(balance + (placeBet.betSizeRed * 2))\r\n                      }\r\n                      if (placeBet.betSizeGreen && finalResult.color === 'green') {\r\n                          props.addBalance(balance + (placeBet.betSizeGreen * 14))\r\n                      }\r\n                  }\r\n                  setPlaceBet({...resetBets})\r\n              }}\r\n          />\r\n         <div className={classes.D1}> <p><strong>Bet amount:</strong></p><input type='number' onChange={updateBet} defaultValue={placeBet.betSize}></input></div>\r\n          <div style={{textShadow: 'white 0px 0px 10px'}}><strong>Balance: {props.balance}</strong></div>\r\n          <button className={classes.Button2} onClick={() => colorBet('black')}>Black {placeBet.betSizeBlack ? placeBet.betSizeBlack :null}</button>\r\n          <button className={classes.Button1} onClick={() => colorBet('red')}>Red {placeBet.betSizeRed ? placeBet.betSizeRed :null}</button>\r\n          <button className={classes.Button3} onClick={() => colorBet('green')}>Green {placeBet.betSizeGreen ? placeBet.betSizeGreen :null}</button>\r\n          <button onClick={handleSpinClick} className={classes.Button} disabled={!placeBet.betSizeBlack && !placeBet.betSizeRed && !placeBet.betSizeGreen}>SPIN</button>\r\n     </div>\r\n  )}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        balance: state.balance\r\n    }\r\n}\r\nconst mapDispatchToState = dispatch => {\r\n    return {\r\n        addBalance: (amount) => dispatch({type: 'ADDBALANCE', amount: amount}),\r\n        removeBalance: (amount) => dispatch({type: 'REMOVEBALANCE', amount: amount})\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToState)(Roulette);\r\n\r\n\r\n","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Components\\Chat\\Chat.js",["63","64"],"import React from 'react';\r\nimport classes from './Chat.module.css';\r\nconst Chat = props => {\r\n    return (\r\n        <div className={classes.Container}>\r\n  <div className={classes.header}>\r\n    <h2>Messages</h2>\r\n    <a href=\"#\" title=\"Add Friend to this chat\">+</a>\r\n  </div>\r\n  <div className={classes.chatbox}>\r\n   <div className={classes.entermessage}>\r\n      <input type=\"text\" placeholder=\"Enter your message..\"/>\r\n      <a href=\"#\" class={classes.send}>Send</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Chat;","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Wrap.js",["65"],"C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Components\\SideDrawer\\SideDrawer.js",["66"],"import React from 'react';\r\nimport classes from './SideDrawer.module.css';\r\nimport {Link} from 'react-router-dom';\r\nconst SideDrawer = props => (\r\n    <nav className={classes.SideDrawer}>\r\n        <ul>\r\n            <li><a href='/'>Home</a></li>\r\n            <li><a href='/shop'>Shop</a></li>\r\n            <li><a href='/inventory'>Inventory</a></li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default SideDrawer;","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Components\\BackDrop\\Backdrop.js",[],"C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Containers\\Shop\\Shop.js",["67"],"import classes from './Shop.module.css';\r\nimport React, {useState} from 'react';\r\nimport Item from './Item';\r\nimport PaypalLogo from '../../paypal.png'\r\nconst Shop = props => {\r\n    const [options, setOptions] = useState({\r\n        value: [\r\n            [20, 2000],\r\n            [40, 4000],\r\n            [60, 6000],\r\n            [80, 8000],\r\n            [100, 10000]\r\n        ]\r\n\r\n    })\r\n    return (\r\n        <div className={classes.Shop}>\r\n            {options.value.map(set => {\r\n                return (\r\n                    <Item url={PaypalLogo}\r\n                        value={set[0]}\r\n                        type='PayPal'\r\n                        points={set[1]}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Shop;\r\n//<Item url={PaypalLogo} value='20$' type='PayPal' points='2000'/>","C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\Containers\\Shop\\Item.js",[],"C:\\Users\\Chro\\Desktop\\GitHub\\Gamling-Site-With-React\\gambling\\src\\store\\reducer.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":10,"column":8,"nodeType":"74","messageId":"75","endLine":10,"endColumn":15},{"ruleId":"72","severity":1,"message":"76","line":10,"column":17,"nodeType":"74","messageId":"75","endLine":10,"endColumn":27},{"ruleId":"72","severity":1,"message":"77","line":1,"column":15,"nodeType":"74","messageId":"75","endLine":1,"endColumn":24},{"ruleId":null,"fatal":true,"severity":2,"message":"78","line":91,"column":70},{"ruleId":"79","severity":1,"message":"80","line":8,"column":5,"nodeType":"81","endLine":8,"endColumn":49},{"ruleId":"79","severity":1,"message":"80","line":13,"column":7,"nodeType":"81","endLine":13,"endColumn":40},{"ruleId":"72","severity":1,"message":"82","line":1,"column":8,"nodeType":"74","messageId":"75","endLine":1,"endColumn":13},{"ruleId":"72","severity":1,"message":"83","line":3,"column":9,"nodeType":"74","messageId":"75","endLine":3,"endColumn":13},{"ruleId":"72","severity":1,"message":"84","line":6,"column":21,"nodeType":"74","messageId":"75","endLine":6,"endColumn":31},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'balance' is assigned a value but never used.","Identifier","unusedVar","'setBalance' is assigned a value but never used.","'useEffect' is defined but never used.","Parsing error: Unexpected token, expected \";\"\n\n\u001b[0m \u001b[90m 89 | \u001b[39m                  \u001b[36mif\u001b[39m (placeBet\u001b[33m.\u001b[39mbetPlaced) {\u001b[0m\n\u001b[0m \u001b[90m 90 | \u001b[39m                      \u001b[36mif\u001b[39m (placeBet\u001b[33m.\u001b[39mbetSizeBlack \u001b[33m&&\u001b[39m finalResult\u001b[33m.\u001b[39mcolor \u001b[33m===\u001b[39m \u001b[32m'black'\u001b[39m) {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 91 | \u001b[39m                          props\u001b[33m.\u001b[39maddBalance(placeBet\u001b[33m.\u001b[39mbetSizeBlack \u001b[33m*\u001b[39m \u001b[35m2\u001b[39m))\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m                                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 92 | \u001b[39m                      }\u001b[0m\n\u001b[0m \u001b[90m 93 | \u001b[39m                      \u001b[36mif\u001b[39m (placeBet\u001b[33m.\u001b[39mbetSizeRed \u001b[33m&&\u001b[39m finalResult\u001b[33m.\u001b[39mcolor \u001b[33m===\u001b[39m \u001b[32m'red'\u001b[39m) {\u001b[0m\n\u001b[0m \u001b[90m 94 | \u001b[39m                          props\u001b[33m.\u001b[39maddBalance(balance \u001b[33m+\u001b[39m (placeBet\u001b[33m.\u001b[39mbetSizeRed \u001b[33m*\u001b[39m \u001b[35m2\u001b[39m))\u001b[0m","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'React' is defined but never used.","'Link' is defined but never used.","'setOptions' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]